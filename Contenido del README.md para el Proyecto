# ERC-20 Token Contract

Este es un contrato inteligente ERC-20 para la creación de un token en la blockchain Ethereum. En este repositorio, encontrarás el código completo para desplegar tu propio token ERC-20.

## Requisitos

- [Node.js](https://nodejs.org/) (se recomienda la versión 16 o superior).
- [Truffle](https://www.trufflesuite.com/truffle) o [Hardhat](https://hardhat.org/) (herramientas para desarrollo de contratos inteligentes).
- [MetaMask](https://metamask.io/) (para interactuar con la red Ethereum).
- [Ganache](https://www.trufflesuite.com/ganache) (para redes de prueba locales).
- [Infura](https://infura.io/) o [Alchemy](https://www.alchemy.com/) (si deseas interactuar con redes públicas como Ethereum mainnet o testnets).

## Instalación y Despliegue

### 1. Clona este repositorio

Primero, clona este repositorio a tu máquina local:

```bash
git clone https://github.com/TuUsuario/TuRepositorio.git

2. Instala las dependencias
Dentro del directorio del proyecto, instala las dependencias necesarias:

bash

cd TuRepositorio
npm install
3. Configura MetaMask
Si aún no tienes MetaMask, puedes descargarlo desde el sitio oficial. Configura tu billetera Ethereum y asegúrate de tener acceso a una red de prueba como Rinkeby o Ropsten para realizar pruebas sin gastar ETH real.

4. Despliega el contrato en una testnet
Ahora que tienes todo configurado, puedes proceder a desplegar el contrato en una testnet como Rinkeby.

Con Truffle
Si estás utilizando Truffle, asegúrate de tener configurado el archivo truffle-config.js con la red que desees utilizar (por ejemplo, Rinkeby). Después, ejecuta el siguiente comando para desplegar el contrato:

bash

truffle migrate --network rinkeby
Con Hardhat
Si prefieres usar Hardhat, configura tu archivo hardhat.config.js para conectarte a la red de pruebas, usando las claves de Infura o Alchemy. Luego, puedes ejecutar el script de despliegue con el siguiente comando:

bash

npx hardhat run scripts/deploy.js --network rinkeby
5. Interactuar con el contrato
Una vez que el contrato esté desplegado, puedes interactuar con él utilizando herramientas como Ethers.js o Web3.js. A continuación se muestra un ejemplo de cómo obtener el balance de tokens de una cuenta usando Ethers.js:

javascript

const { ethers } = require("ethers");

async function main() {
  const provider = new ethers.JsonRpcProvider("https://rinkeby.infura.io/v3/TuInfuraKey");
  const wallet = new ethers.Wallet("TuClavePrivada", provider);

  const contractAddress = "Dirección del contrato";
  const contractABI = [
    "function balanceOf(address account) public view returns (uint256)"
  ];

  const contract = new ethers.Contract(contractAddress, contractABI, wallet);
  const balance = await contract.balanceOf(wallet.address);
  console.log(`Balance: ${ethers.utils.formatUnits(balance, 18)} tokens`);
}

main().catch((error) => {
  console.error(error);
  process.exitCode = 1;
});
6. Personaliza tu Token
Si deseas personalizar tu token, puedes hacerlo modificando los parámetros del contrato, como el nombre, el símbolo y el suministro inicial. Por ejemplo:

solidity

constructor() ERC20("MiToken", "MTK") {
    _mint(msg.sender, 1000000 * (10 ** decimals()));
}
7. Próximos pasos
Acuñar más tokens: Puedes usar la función mint para crear más tokens en el contrato si el contrato permite acuñar más tokens en el futuro.
Crear un mercado para tu token: Considera la posibilidad de crear un mercado donde las personas puedan intercambiar tu token. Uniswap es una plataforma popular para crear mercados descentralizados.
Contribuir
Si deseas contribuir a este proyecto, por favor haz un fork del repositorio y realiza un pull request.

Licencia
Este proyecto está licenciado bajo la Licencia MIT.

markdown


### 4. **Subir los cambios al repositorio**

Una vez que hayas actualizado el archivo `README.md` con esta nueva información, asegúrate de subir los cambios a tu repositorio:

1. **Añade el archivo README actualizado a Git**:

```bash
git add README.md
Realiza un commit con un mensaje descriptivo:
bash

git commit -m "Actualizado README con instrucciones detalladas para instalar y desplegar el contrato ERC-20"
Sube los cambios a GitHub:
bash

git push origin main







